<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python基础-目录 (Baidu AI Studio)</title>
    <link href="/2021/01/31/python%E5%9F%BA%E7%A1%80-%E7%9B%AE%E5%BD%95-%E7%99%BE%E5%BA%A6AI/"/>
    <url>/2021/01/31/python%E5%9F%BA%E7%A1%80-%E7%9B%AE%E5%BD%95-%E7%99%BE%E5%BA%A6AI/</url>
    
    <content type="html"><![CDATA[<p>本课一共有七个小节，最后一节是一个小测验，测试大家对Python的掌握情况~ 下面让我们来开始学习吧 ~</p><a id="more"></a><p class="note note-warning">    本文转载于Baidu AI Studio <br>    这篇课程详细清晰的讲解了python的基础语法，适合初学者，故记录于本博客</p><h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><p><img src="https://ai-studio-static-online.cdn.bcebos.com/1a5d19a4b94241a9bd7b518e5417909361ee2f5b42fe4e5f98a53d4400b434e9"></p><p>在深度学习中，我们经常会看到很多demo是用Python来写的，Python也确实越来越火了，除了demo以外，目前主流的深度学习框架都支持Python，大家可以很方便的用Python来编程。在这一节课中我会教大家从基础的语法开始入手，学习Python的常用命令。本节课一共有七个小节，最后一节是一个小测验，测试大家对Python的掌握情况~ 下面让我们来开始学习吧 ~</p><h2 id="第一节-Python基础关键字和语法"><a href="#第一节-Python基础关键字和语法" class="headerlink" title="第一节 Python基础关键字和语法"></a>第一节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/98651">Python基础关键字和语法</a></h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>Hello World!</li><li>字符串操作</li><li>简单数学计算</li><li>if elif else</li><li>循环</li><li>小测试</li></ul><h2 id="第二节-Python中常见的数据结构"><a href="#第二节-Python中常见的数据结构" class="headerlink" title="第二节 Python中常见的数据结构"></a>第二节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/98653">Python中常见的数据结构</a></h2><h3 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h3><ul><li><p>字典</p><ul><li>访问字典种的值</li><li>更新字典</li><li>使用get()方法返回给定键的值</li><li>删除键同时也能返回值</li><li>遍历字典</li></ul></li><li><p>元组</p><ul><li><p>初始化</p></li><li><p>访问元组内的值</p></li><li><p>切分元组</p></li><li><p>元组方法</p><ul><li>index方法（索引）</li><li>count方法（计数）</li></ul></li><li><p>遍历元组</p></li><li><p>元组拆包</p></li><li><p>枚举</p></li><li><p>元组与列表的优劣分析</p></li></ul></li></ul><h2 id="第三节-Python中的for循环"><a href="#第三节-Python中的for循环" class="headerlink" title="第三节 Python中的for循环"></a>第三节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/98650">Python中的for循环</a></h2><h3 id="目录-2"><a href="#目录-2" class="headerlink" title="目录"></a>目录</h3><ul><li>枚举</li><li>Continue</li><li>Break</li></ul><h2 id="第四节-Python中的while循环"><a href="#第四节-Python中的while循环" class="headerlink" title="第四节 Python中的while循环"></a>第四节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/98649">Python中的while循环</a></h2><h3 id="目录-3"><a href="#目录-3" class="headerlink" title="目录"></a>目录</h3><ul><li>for循环与while循环区别</li><li>break语句</li></ul><h2 id="第五节-Python中的函数"><a href="#第五节-Python中的函数" class="headerlink" title="第五节 Python中的函数"></a>第五节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/98652">Python中的函数</a></h2><h3 id="目录-4"><a href="#目录-4" class="headerlink" title="目录"></a>目录</h3><ul><li><p>Python中的函数是什么？</p></li><li><p>创建函数的语法</p></li><li><p>如何在Python中调用函数</p></li><li><p>文档字符串</p></li><li><p>返回语句</p></li><li><p>变量的范围和寿命</p></li><li><p>参数</p></li><li><p>变量函数参数</p><ul><li>Python默认参数</li><li>Python关键字参数</li><li>Python任意参数</li></ul></li><li><p>在列表中重复对象</p></li></ul><h2 id="第六节-Python中的面向对象编程"><a href="#第六节-Python中的面向对象编程" class="headerlink" title="第六节 Python中的面向对象编程"></a>第六节 <a href="https://aistudio.baidu.com/aistudio/projectDetail/100290">Python中的面向对象编程</a></h2><h3 id="目录-5"><a href="#目录-5" class="headerlink" title="目录"></a>目录</h3><ul><li>Python类</li><li>对象实例</li><li>定义和使用方法</li><li>OOP继承</li></ul><h2 id="第七节让我们来做个小测验吧！"><a href="#第七节让我们来做个小测验吧！" class="headerlink" title="第七节让我们来做个小测验吧！"></a>第七节<a href="https://aistudio.baidu.com/aistudio/projectDetail/98654">让我们来做个小测验吧！</a></h2><h3 id="目录-6"><a href="#目录-6" class="headerlink" title="目录"></a>目录</h3><h4 id="常规测验"><a href="#常规测验" class="headerlink" title="常规测验"></a>常规测验</h4><ul><li>将字母转换成小写字母</li><li>反转字符串中的单词</li><li>排列组合</li><li>阶乘</li><li>整型转罗马数字</li><li>盛水最多的容器</li><li>矩阵置零</li><li>文件操作</li></ul><h4 id="高难度联系"><a href="#高难度联系" class="headerlink" title="高难度联系"></a>高难度联系</h4><ul><li>猜数字</li><li>FizzBuzz</li><li>猜数字的AI</li><li>整点报时</li><li>敏感词审查</li><li>文字毛线游戏</li><li>词频统计</li><li>Markdown转化器</li><li>邮件轰炸机</li><li>用邮件控制电脑</li></ul><hr><p>至此，Python从零入门的七个小节的课程已经全部学完了，你掌握了吗？</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是深度学习？</title>
    <link href="/2021/01/31/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9F/"/>
    <url>/2021/01/31/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p> 深度学习是一种机器学习方法 ， 它允许我们训练人工智能来预测输出，给定一组输入(指传入或传出计算机的信息)。监督学习和非监督学习都可以用来训练人工智能。</p><a id="more"></a><p class="note note-warning">本文转载于Baidu AI Studio</p><h1 id="什么是深度学习？"><a href="#什么是深度学习？" class="headerlink" title="什么是深度学习？"></a>什么是深度学习？</h1><p><img src="https://ai-studio-static-online.cdn.bcebos.com/60ba91a3d2c4427d82b933b25e490275e993d3e75f3149269a6d07efd3ff2067"></p><h1 id="一、深度学习的发展历程"><a href="#一、深度学习的发展历程" class="headerlink" title="一、深度学习的发展历程"></a>一、深度学习的发展历程</h1><h2 id="1-1-Turing-Testing-图灵测试"><a href="#1-1-Turing-Testing-图灵测试" class="headerlink" title="1.1 Turing Testing (图灵测试)"></a>1.1 Turing Testing (图灵测试)</h2><p>图灵测试是人工智能是否真正能够成功的一个标准，“计算机科学之父”、“人工智能之父”英国数学家图灵在1950年的论文《机器会思考吗》中提出了图灵测试的概念。即把一个人和一台计算机分别放在两个隔离的房间中，房间外的一个人同时询问人和计算机相同的问题，如果房间外的人无法分别哪个是人，哪个是计算机，就能够说明计算机具有人工智能。</p><h2 id="1-2-医学上的发现"><a href="#1-2-医学上的发现" class="headerlink" title="1.2 医学上的发现"></a>1.2 医学上的发现</h2><p>1981年的诺贝尔将颁发给了David Hubel和Torsten Wiesel，以及Roger Sperry。他们发现了<strong>人的视觉系统处理信息是分级的</strong>。 </p><p>从视网膜（Retina）出发，经过低级的V1区提取边缘特征，到V2区的基本形状或目标的局部，再到高层的整个目标（如判定为一张人脸），以及到更高层的PFC（前额叶皮层）进行分类判断等。也就是说<strong>高层的特征是低层特征的组合，从低层到高层的特征表达越来越抽象和概念化，也即越来越能表现语义或者意图</strong>。</p><blockquote><p>边缘特征 —–&gt; 基本形状和目标的局部特征——&gt;整个目标<br>这个过程其实和我们的常识是相吻合的，因为复杂的图形，往往就是由一些基本结构组合而成的。同时我们还可以看出：大脑是一个深度架构，认知过程也是深度的。</p></blockquote><p><img src="https://ai-studio-static-online.cdn.bcebos.com/14ba02554a4e48649332f4415341aab2cd94c6753c624265a16a8918498e6d2a"><br>人脑神经元示意图</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/8e35b368c84540bdbc29beaa2d78a29466801b7e43b146cda87087a117abce3a"><br>计算机识别图像的过程</p><h2 id="1-3-Deep-Learning的出现"><a href="#1-3-Deep-Learning的出现" class="headerlink" title="1.3 Deep Learning的出现"></a>1.3 Deep Learning的出现</h2><blockquote><p>低层次特征 - - - - (组合) - - -&gt;抽象的高层特征</p></blockquote><p>深度学习，恰恰就是通过组合低层特征形成更加抽象的高层特征（或属性类别）。例如，在计算机视觉领域，深度学习算法从原始图像去学习得到一个低层次表达，例如边缘检测器、小波滤波器等，然后在这些低层次表达的基础上，通过线性或者非线性组合，来获得一个高层次的表达。此外，不仅图像存在这个规律，声音也是类似的。比如，研究人员从某个声音库中通过算法自动发现了20种基本的声音结构，其余的声音都可以由这20种基本结构来合成！</p><h1 id="二、机器学习"><a href="#二、机器学习" class="headerlink" title="二、机器学习"></a>二、机器学习</h1><p>机器学习是实现人工智能的一种手段，也是目前被认为比较有效的实现人工智能的手段，目前在业界使用机器学习比较突出的领域很多，例如：计算机视觉、自然语言处理、推荐系统等等。大家生活中经常用到的比如高速上的ETC的车牌识别，今日头条的新闻推荐，天猫上的评价描述。<br>机器学习是人工智能的一个分支，而在很多时候，几乎成为人工智能的代名词。简单来说，机器学习就是通过算法，使得机器能从大量历史数据中学习规律，从而对新的样本做智能识别或对未来做预测。</p><h2 id="2-1-人工智能vs机器学习"><a href="#2-1-人工智能vs机器学习" class="headerlink" title="2.1 人工智能vs机器学习"></a>2.1 人工智能vs机器学习</h2><blockquote><p>人工智能是计算机科学的一个分支，研究计算机中智能行为的仿真。</p></blockquote><p>每当一台机器根据一组预先定义的解决问题的规则来完成任务时，这种行为就被称为人工智能。</p><p>开发人员引入了大量计算机需要遵守的规则。计算机内部存在一个可能行为的具体清单，它会根据这个清单做出决定。如今，人工智能是一个概括性术语，涵盖了从高级算法到实际机器人的所有内容。</p><p>我们有四个不同层次的AI，让我们来解释前两个:</p><ul><li>弱人工智能，也被称为狭义人工智能，是一种为特定的任务而设计和训练的人工智能系统。弱人工智能的形式之一是虚拟个人助理，比如苹果公司的Siri。</li><li>强人工智能，又称人工通用智能，是一种具有人类普遍认知能力的人工智能系统。当计算机遇到不熟悉的任务时，它具有足够的智能去寻找解决方案。</li></ul><p>机器学习是指计算机使用大数据集而不是硬编码规则来学习的能力。</p><p>机器学习允许计算机自己学习。这种学习方式利用了现代计算机的处理能力，可以轻松地处理大型数据集。</p><p>基本上，机器学习是人工智能的一个子集;更为具体地说，它只是一种实现AI的技术，一种训练算法的模型，这种算法使得计算机能够学习如何做出决策。</p><p>从某种意义上来说，机器学习程序根据计算机所接触的数据来进行自我调整。</p><h2 id="2-2-监督式学习vs非监督式学习"><a href="#2-2-监督式学习vs非监督式学习" class="headerlink" title="2.2 监督式学习vs非监督式学习"></a>2.2 监督式学习vs非监督式学习</h2><blockquote><p>监督式学习需要使用有输入和预期输出标记的数据集。</p></blockquote><p>当你使用监督式学习训练人工智能时，你需要提供一个输入并告诉它预期的输出结果。</p><p>如果人工智能产生的输出结果是错误的，它将重新调整自己的计算。这个过程将在数据集上不断迭代地完成，直到AI不再出错。</p><p>监督式学习的一个例子是天气预报人工智能。它学会利用历史数据来预测天气。训练数据包含输入(过去天气的压力、湿度、风速)和输出(过去天气的温度)。</p><p>我们还可以想象您正在提供一个带有标记数据的计算机程序。例如，如果指定的任务是使用一种图像分类算法对男孩和女孩的图像进行分类，那么男孩的图像需要带有“男孩”标签，女孩的图像需要带有“女孩”标签。这些数据被认为是一个“训练”数据集，直到程序能够以可接受的速率成功地对图像进行分类，以上的标签才会失去作用。</p><p>它之所以被称为监督式学习，是因为算法从训练数据集学习的过程就像是一位老师正在监督学习。在我们预先知道正确的分类答案的情况下，算法对训练数据不断进行迭代预测，然后预测结果由“老师”进行不断修正。当算法达到可接受的性能水平时，学习过程才会停止。</p><blockquote><p>非监督式学习是利用既不分类也不标记的信息进行机器学习，并允许算法在没有指导的情况下对这些信息进行操作。</p></blockquote><p>当你使用非监督式学习训练人工智能时，你可以让人工智能对数据进行逻辑分类。这里机器的任务是根据相似性、模式和差异性对未排序的信息进行分组，而不需要事先对数据进行处理。</p><p>非监督式学习的一个例子是亚马逊等电子商务网站的行为预测AI。</p><p>它将创建自己输入数据的分类，帮助亚马逊识别哪种用户最有可能购买不同的产品(交叉销售策略)。<br>另一个例子是，程序可以任意地使用以下两种算法中的一种来完成男孩女孩的图像分类任务。一种算法被称为“聚类”，它根据诸如头发长度、下巴大小、眼睛位置等特征将相似的对象分到同一个组。另一种算法被称为“相关”，它根据自己发现的相似性创建if/then规则。换句话说，它确定了图像之间的公共模式，并相应地对它们进行分类。</p><h1 id="三、深度学习如何工作"><a href="#三、深度学习如何工作" class="headerlink" title="三、深度学习如何工作"></a>三、深度学习如何工作</h1><p>什么是深度学习，以及它是如何工作的。</p><p>深度学习是一种机器学习方法 ， 它允许我们训练人工智能来预测输出，给定一组输入(指传入或传出计算机的信息)。监督学习和非监督学习都可以用来训练人工智能。</p><blockquote><p>Andrew Ng：“与深度学习类似的是，火箭发动机是深度学习模型，燃料是我们可以提供给这些算法的海量数据。”</p></blockquote><p>我们将通过建立一个公交票价估算在线服务来了解深度学习是如何工作的。为了训练它，我们将使用监督学习方法。</p><p>我们希望我们的巴士票价估价师使用以下信息/输入来预测价格:<br><img src="https://ai-studio-static-online.cdn.bcebos.com/8dfb449f950f479789c91dbe580367cb0c911078e61a45c0a45cb7fd402cfb9e"></p><h2 id="3-1-神经网络"><a href="#3-1-神经网络" class="headerlink" title="3.1 神经网络"></a>3.1 神经网络</h2><p>神经网络是一组粗略模仿人类大脑，用于模式识别的算法。神经网络这个术语来源于这些系统架构设计背后的灵感，这些系统是用于模拟生物大脑自身神经网络的基本结构，以便计算机能够执行特定的任务。 </p><p>和人类一样， “AI价格评估”也是由神经元(圆圈)组成的。此外，这些神经元还是相互连接的。 </p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/24ba46820718419da5b164c55410fa871bc1dc870377440894dae3a77b85957d"></p><p>神经元分为三种不同类型的层次：</p><ul><li><p>输入层接收输入数据。在我们的例子中，输入层有四个神经元:出发站、目的地站、出发日期和巴士公司。输入层会将输入数据传递给第一个隐藏层。</p></li><li><p>隐藏层对输入数据进行数学计算。创建神经网络的挑战之一是决定隐藏层的数量，以及每一层中的神经元的数量。</p></li><li><p>人工神经网络的输出层是神经元的最后一层，主要作用是为此程序产生给定的输出，在本例中输出结果是预测的价格值。</p></li></ul><p><img src="https://ai-studio-static-online.cdn.bcebos.com/5f0617e162a145ebafc97631534484a1e68e44b4b2374c299b06ed995ccc8c3b"></p><p>神经元之间的每个连接都有一个权重。这个权重表示输入值的重要性。模型所做的就是学习每个元素对价格的贡献有多少。这些“贡献”是模型中的权重。一个特征的权重越高，说明该特征比其他特征更为重要。</p><p>在预测公交票价时，出发日期是影响最终票价的最为重要的因素之一。因此，出发日期的神经元连接具有较大的“权重”。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/45ec203def6145c7948481834b56a34fcca2ea9a52a64397971b04ac43b87a92"></p><p>每个神经元都有一个激活函数。它主要是一个根据输入传递输出的函数。<br>当一组输入数据通过神经网络中的所有层时，最终通过输出层返回输出数据。</p><h2 id="3-2-通过训练改进神经网络"><a href="#3-2-通过训练改进神经网络" class="headerlink" title="3.2 通过训练改进神经网络"></a>3.2 通过训练改进神经网络</h2><p>为了提高“AI价格评估”的精度，我们需要将其预测结果与过去的结果进行比较，为此，我们需要两个要素:</p><ul><li>大量的计算能力；</li><li>大量的数据。</li></ul><p>训练AI的过程中，重要的是给它的输入数据集(一个数据集是一个单独地或组合地或作为一个整体被访问的数据集合),此外还需要对其输出结果与数据集中的输出结果进行对比。因为AI一直是“新的”，它的输出结果有可能是错误的。</p><p>对于我们的公交票价模型，我们必须找到过去票价的历史数据。由于有大量“公交车站”和“出发日期”的可能组合，因而我们需要一个非常大的票价清单。</p><p>一旦我们遍历了整个数据集，就有可能创建一个函数来衡量AI输出与实际输出(历史数据)之间的差异。这个函数叫做成本函数。即成本函数是一个衡量模型准确率的指标，衡量依据为此模型估计X与Y间关系的能力。</p><p>模型训练的目标是使成本函数等于零，即当AI的输出结果与数据集的输出结果一致时（成本函数等于0）。</p><h2 id="3-3-我们如何降低成本函数呢"><a href="#3-3-我们如何降低成本函数呢" class="headerlink" title="3.3 我们如何降低成本函数呢?"></a>3.3 我们如何降低成本函数呢?</h2><p>通过使用一种叫做梯度下降的方法。梯度衡量得是，如果你稍微改变一下输入值，函数的输出值会发生多大的变化。</p><p>梯度下降法是一种求函数最小值的方法。在这种情况下，目标是取得成本函数的最小值。<br>它通过每次数据集迭代之后优化模型的权重来训练模型。通过计算某一权重集下代价函数的梯度，可以看出最小值的梯度方向。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/666c7aca1f69433490eb0a183e0b8dc7d79e9541f6d54d1985e3eba67f322c1d"></p><p>为了降低成本函数值，多次遍历数据集非常重要。这就是为什么需要大量计算能力的原因。<br>一旦我们通过训练改进了AI，我们就可以利用它根据上述四个要素来预测未来的价格。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习与神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>自然语言处理</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo多部署-同时部署到阿里云OSS和Github</title>
    <link href="/2021/01/31/Hexo%E5%A4%9A%E9%83%A8%E7%BD%B2-%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%92%8CGithub/"/>
    <url>/2021/01/31/Hexo%E5%A4%9A%E9%83%A8%E7%BD%B2-%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%92%8CGithub/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo多部署-同时部署到阿里云OSS和Github"><a href="#Hexo多部署-同时部署到阿里云OSS和Github" class="headerlink" title="Hexo多部署-同时部署到阿里云OSS和Github"></a>Hexo多部署-同时部署到阿里云OSS和Github</h1><a id="more"></a><style>img {    display: block;    margin: 0 auto;}</style><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于<a href="https://6ss.top/posts/20200902/">1元 高速访问 博客网站 搭建方案</a> · <a href="https://www.uu126.cn/post/one-click-deployment-of-hexo-to-alibaba-cloud-oss.html">Hexo一键部署到阿里云OSS</a>进行补充，感谢原作分享</p><p>由于GitHub Page国内被限制，用服务器搭建静态博客的话相对成本较高，然后在酷安看到用阿里云对象存储OSS低成本搭建静态博客的帖子，于是着手尝试，成本总计2.99元    [1元(域名)+1.99元(服务号)]  (第一年)</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><strong>选择购买域名并备案</strong> (<a href="https://wanwang.aliyun.com/domain/1yuan">阿里云域名1元购</a>)<br>  （域名实名有两天左右的延迟才能备案,备案服务号可以淘宝解决）  <img src="https://img.imgdb.cn/item/601669f23ffa7d37b34887c9.jpg" width="300"></li></ul><br><ul><li><p><strong>开通阿里云对象存储OSS</strong> (<a href="https://www.aliyun.com/product/oss?spm=5176.119692.725171.40.6b101636SQQTS4">对象存储 OSS</a>)</p><p>  (默认为按量收费)    </p></li></ul><img src="https://img.imgdb.cn/item/60166f3d3ffa7d37b34a88ab.jpg"><br><ul><li><strong>完成各种实名认证和信息登记</strong></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p>需要创建一个公共读的Bucket，用以设置静态网站托管及存放网站数据。</p><ul><li><p>登录OSS管理控制台。</p></li><li><p>单击Bucket列表，然后单击创建Bucket。</p></li><li><p>在创建Bucket面板配置Bucket参数，其中：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Bucket名称</td><td>设置Bucket名称。</td></tr><tr><td>地域</td><td>选择Bucket所在地域。</td></tr><tr><td>存储类型</td><td>选择标准存储。</td></tr><tr><td>读写权限</td><td>选择公共读。</td></tr></tbody></table></li><li><p>进入创建好的Bucket，点击基础设置，设置静态页面的默认首页为 index.html</p></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h3 id="设置AccessKey"><a href="#设置AccessKey" class="headerlink" title="设置AccessKey"></a>设置AccessKey</h3><ul><li><p><strong>在网页右上角点击AccessKey管理</strong></p><img src="https://img.imgdb.cn/item/601676893ffa7d37b34d4281.jpg"></li><li><p><strong>创建子用户然后添加权限</strong></p><ul><li>创建子用户<img src="https://img.imgdb.cn/item/601678e33ffa7d37b34e1bb7.jpg"></li><li>勾选编程访问<img src="https://img.imgdb.cn/item/601678fe3ffa7d37b34e2832.jpg"></li><li>添加权限<img src="https://img.imgdb.cn/item/601677473ffa7d37b34d8252.jpg"></li></ul></li></ul><ul><li><strong>选择管理对象存储服务(OSS)权限</strong>  <img src="https://img.imgdb.cn/item/601677d03ffa7d37b34dab91.jpg"></li></ul><ul><li><strong>进入用户，创建AccessKey</strong> <img src="https://img.imgdb.cn/item/601678a63ffa7d37b34dff70.jpg"> <p class="note note-warning">复制生成好的AccessKey ID 和 AccessKey Secret</p></li></ul><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><ul><li><p><strong>在hexo的目录下执行：</strong></p><pre><code>  npm install hexo-deployer-ali-oss --save</code></pre></li><li><p><strong>在hexo_config.yml文件中部署配置</strong></p></li></ul><p class="note note-warning">单部署器</p><pre><code>    deploy:    type: ali-oss    region: &lt;您的oss 区域代码&gt;    accessKeyId: &lt;您的oss  accessKeyId&gt;    accessKeySecret: &lt;您的oss accessKeySecret&gt;    bucket: &lt;您的bucket name&gt;</code></pre><p class="note note-warning">多部署器</p><img src="https://img.imgdb.cn/item/60167c6e3ffa7d37b34f5acc.jpg"><br><ul><li><a href="https://hexo.io/docs/one-command-deployment">hexo官方文档对部署器配置的解释</a></li></ul><h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><p>全部部署完成后，即可通过 hexo g 将博客同时推送至OSS和Github</p>]]></content>
    
    
    <categories>
      
      <category>hexo博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客部署</tag>
      
      <tag>对象存储OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频编码</title>
    <link href="/2021/01/30/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/"/>
    <url>/2021/01/30/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>如今我们所处的时代，是移动互联网时代，也可以说是视频时代。我们的生活被越来越多的视频元素所影响，而这一切，离不开视频拍摄技术的不断升级，还有视频制作产业的日益强大。除了视频拍摄工具和网络通信技术升级之外，我们能享受到视<br>频带来的便利和乐趣，还有一个重要因素，就是视频编码技术的突飞猛进。本文将对视频编码技术基础进行简述</p><a id="more"></a><h2 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h2><h3 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h3><hr><ul><li><strong>压缩</strong><ul><li><strong>为什么要压缩？</strong><ul><li>未经压缩的数字视频的数据量<strong>巨大</strong></li><li>存储困难</li><li>传输困难</li></ul></li></ul></li></ul><!--more--><ul><li><p><strong>为什么可以压缩？</strong></p><ul><li><p>去除冗余信息</p><ul><li><p>空间冗余: 图像相邻像素之间有较强的相关性</p></li><li><p>时间冗余: 视频序列的相邻图像之间内容相似</p></li><li><p>编码冗余: 不同像素值出现的概率不同</p></li><li><p>视觉冗余: 人的视觉系统对某些细节不敏感</p></li><li><p>知识冗余: 规律性的结构可由先验知识和背景知识得到</p><pre><code>   针对这些不同类型的冗余信息，在各种视频编码的标准算法中都有不同的技术专门应对，   以通过不同的角度提高压缩的比率。</code></pre></li></ul></li></ul></li><li><p><strong>数据压缩分类</strong></p><ul><li><p>无损压缩(Lossless)</p><ul><li>压缩前解压缩后图像完全一致 <strong>X=X’</strong></li><li>压缩比低(2:1~3:1)</li><li>例如: <ul><li>JPEG-LS(一种对连续色调图像的无损或者近无损的压缩标准)</li><li>Winzip</li></ul></li></ul></li><li><p>有损压缩(Lossy)</p><ul><li><p>压缩前解压缩后图像不一致 <strong>X≠X’</strong></p></li><li><p>压缩比高(10:1~20:1)</p></li><li><p>利用人的视觉系统的特性</p></li><li><p>例如:MPEG-2，H.264/AVC，AVS</p><p>   <strong>AVS与MPEG-2、MPEG-4 AVC/H.264使用的技术对比和性能差异估计</strong></p></li></ul></li></ul></li></ul><img src="https://img.imgdb.cn/item/601572f43ffa7d37b3f64e77.jpg"><!-- |视频编码标准|MPEG-2视频|MPEG-4 AVC/H.264视频|AVS视频|AVS视频与AVC/H.264性能差异估计（采用信噪比dB估算,括号内的百分比为码率差异）||--|--|--|--|--|--|--|--|--||帧内预测|只在频域内进行DC系数差分预测|基于4×4块，9种亮度预测模式，4种色度预测模式|基于8×8块，5种亮度预测模式，4种色度预测模式|基本相当||多参考帧预测|只有1帧|最多16帧|最多2帧|都采用两帧时相当，帧数增加性能提高不明显||变块大小运动补偿|16×16，16×8(场编码)|16×16、16×8、8×16、8×8、8×4、4×8、4×4|16×16、16×8、8×16、8×8|降低约0.1dB(2-4%)||B帧宏块直接编码模式|无|独立的空域或时域预测模式，若后向参考帧中用于导出运动矢量的块为帧内编码时，只是视其运动矢量为0，依然用于预测|时域空域相结合，当时域内后向参考帧中用于导出运动矢量的块为帧内编码时，使用空域相邻块的运动矢量进行预测|提高0.2-0.3dB(5%)||B帧宏块双向预测模式|编码前后两个运动矢量|编码前后两个运动矢量|称为对称预测模式，只编码一个前向运动矢量，后向运动矢量由前向导出|基本相当||熵编码|单一VLC表，适应性差|CAVLC：与周围块相关性高，实现较复杂CABAC：计算较复杂|上下文自适应2D-VLC，编码块系数过程中进行多码表切换|降低约0.5dB(10-15%)||环路滤波|无|基于4×4块边缘进行，滤波强度分类繁多，计算复杂|基于8×8块边缘进行，简单的滤波强度分类，滤波较少的像素，计算复杂度低|——||容错编码|简单的条带划分|数据分割、复杂的FMO/ASO等宏块、条带组织机制、强制Intra块刷新编码、约束性帧内预测等|简单的条带划分机制足以满足广播应用中的错误隐藏、恢复需求|——| --><pre><code>DCT（Discrete Cosine Transform）：离散余弦变换VLC（Variable Length Coding）：变长编码CAVLC（Context-based Adaptive Variable Length Coding）：基于上下文的自适应变长码CABAC（Context-based Adaptive Binary Arithmetic Coding）：基于上下文的自适应二进制算术编码FMO（Flexible Macroblock Ordering）：灵活的宏块排序ASO（Arbitrary Slice Ordering）：任意条带排列</code></pre><br><h3 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h3><hr><p class="note note-info">    数字视频有时间分辨率、空间分辨率、色彩空间、量化深度等参数，这些参数的组合称为视频格式</p><ul><li><p><strong>时间</strong>——帧率（frame per second）——流畅</p></li><li><p><strong>空间</strong>——分辨率——清晰</p></li><li><p><strong>色彩空间</strong></p><ul><li><p><strong>RGB颜色空间</strong></p>   <p class="note note-danger">                   RGB（红绿蓝）是依据人眼识别的颜色定义出的空间，可表示大部分颜色。       但在科学研究一般不采用RGB颜色空间，因为它的细节难以进行数字化的调整。       它将色调，亮度，饱和度三个量放在一起表示，很难分开。       它是最通用的面向硬件的彩色模型。该模型用于彩色监视器和一大类彩色视频摄像。   </p></li><li><p><strong>YUV颜色空间</strong></p>   <p class="note note-success">           在 YUV空间中，每一个颜色有一个亮度信号 Y，和两个色度信号 U 和V。       亮度信号是强度的感觉，它和色度信号断开，这样的话强度就可以在不影响颜色的情况下改变。       视频通信系统之所以要采用YUV，而不是RGB，主要是因为RGB信号不利于压缩。       在YUV这种方式里面，加入了亮度这一概念。眼睛对于亮和暗的分辨要比对颜色的分辨更精细一些，       人眼对色度的敏感程度要低于对亮度的敏感程度。   </p>　　所以，工程师认为，在我们的视频存储中，没有必要存储全部颜色信号。我们可以把更多带宽留给黑—白信号(被称作“亮度”)，将稍少的带宽留给彩色信号(被称作“色度”)。于是，就有了YUV。YUV里面的“Y”，就是亮度(Luma)，“U”和“V”则是色度(Chroma)</li><li><p><strong>YCbCr颜色空间</strong></p></li></ul></li></ul><p class="note note-secondary">            YCbCr 是在世界数字组织视频标准研制过程中作为ITU-RBT1601建议的一部分,其实是YUV经过缩放和偏移的翻版。            其中Y与YUV中的Y含义一致,Cb,Cr同样都指色彩, 只是在表示方法上不同而已。            在YUV家族中,YCbCr是在计算机系统中应用最多的成员,其应用领域很广泛,             JPEG、MPEG均采用此格式。</p><p><strong>Y表示亮度，CbCr表示颜色。怎么表示颜色，可以看下面这幅坐标图</strong></p><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156cbf3ffa7d37b3f3238a.png" width = "300" height = "300"  /><p><strong>Y要如何表示亮度呢，下面是Y在不同的情况下的表现</strong></p><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156ccf3ffa7d37b3f32a3e.png" width = "600" height = "200"  /><br><ul><li><p><strong>存储方式</strong></p><p> <strong>以黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量</strong></p></li></ul><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156cdd3ffa7d37b3f32f33.jpg" width = "660" height = "200"  /><ul><li><p>YUV 4:4:4采样，每一个Y对应一组UV分量。</p></li><li><p>YUV 4:2:2采样，每两个Y共用一组UV分量。</p></li><li><p>YUV 4:2:0采样，每四个Y共用一组UV分量。</p><br></li><li><p><strong>量化深度</strong>——精确</p><pre><code> 像素每一分量的数值对应的量化等级为量化深度，量化深度越大，像素值可以越精确。 8 bit 10bit</code></pre><ul><li><p>10bit的视频记录更精确的色彩，比如我们平时用的rgb 每个通道8bit，那么每个颜色分量就0~255，只有256个，而10bit就有1024个。实际体验上，更细致的颜色分级意味着渐变色更细腻</p><pre><code>  视频的10bit的压制。  可以在保持高画质的前提下大大提升压缩效率，10bit压制主要是通过提升编码的精度，  从而在有损压缩时可以采用更高的量化值，同时保持十分好的质量，  于是可以在比8bit压制更低的码率下还原出更好的画面。  10bit在更高的精度冗余下可以在有损编码时有更高的效率。  具体对于画质有利的方面主要在于：  1.防止banding（色彩平滑过渡区域的色带）产生  2 提升暗场效果  3.更好地容纳噪点  而这几项正好都是现在8bit压制中很难处理的地方。特别是对于动画，  banding是个及其麻烦的东西。暗场是十分容易码率分配不足，并且产生画面劣化的部分。  而噪点则是十分消耗码率。10bit下这些困难的东西都变得容易处理了。  目前所使用的10bit压制是作用于内部的编码精度，而不是输出精度。</code></pre></li></ul></li></ul><h2 id="视频编码原理"><a href="#视频编码原理" class="headerlink" title="视频编码原理"></a>视频编码原理</h2><ul><li>冗余编码技术</li><li><img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0bd14a3.jpg"><br></li></ul><img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0c0cb08.jpg"><p>视频编码技术优先消除的目标，就是空间冗余和时间冗余。<br><br></p><ul><li>视频是由不同的帧画面连续播放形成的。这些帧，主要分为三类，分别是：<ul><li><strong>I帧</strong>：是自带全部信息的独立帧，是最完整的画面(占用的空间最大)，无需参考其它图像便可独立进行解码。视频序列中的第一个帧，始终都是I帧。<br></li><li><strong>B帧</strong>：“双向预测编码帧”，以前帧后帧作为参考帧。不仅参考前面，还参考后面的帧，所以，它的压缩率最高，可以达到200:1。不过，因为依赖后面的帧，所以不适合实时传输(例如视频会议)。<img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0cb81b8.jpg"><br></li><li><strong>P帧</strong>：“帧间预测编码帧”，需要参考前面的I帧和/或P帧的不同部分，才能进行编码。P帧对前面的P和I参考帧有依赖性。但是，P帧压缩率比较高，占用的空间较小。<img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0c74ff8.jpg"><br></li></ul></li></ul><p class="note note-primary">时间冗余（帧间预测）</p><p class="note note-primary">空间冗余（帧内预测）</p><br><h2 id="视频数据的封装"><a href="#视频数据的封装" class="headerlink" title="视频数据的封装"></a>视频数据的封装</h2><pre><code>　　对于任何一部视频来说，只有图像，没有声音，肯定是不行的。所以，视频编码后，加上音频编码，要一起进行封装。　　封装：就是封装格式，简单来说，就是将已经编码压缩好的视频轨和音频轨按照一定的格式放到一个文件中。    再通俗点，视频轨相当于饭，而音频轨相当于菜，封装格式就是一个饭盒，用来盛放饭菜的容器。　　目前主要的视频容器有如下：MPG、VOB、MP4、3GP、ASF、RMVB、WMV、MOV、Divx、MKV、FLV、TS/PS等。　　封装之后的视频，就可以传输了，你也可以通过视频播放器进行解码观看。</code></pre><p>　</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p class="note note-info">     <a href="https://blog.csdn.net/asahinokawa/article/details/80596655">[1] 对颜色空间 YUV,RGB 的理解</a><br>    <a href="https://www.easemob.com/news/3614">[2] 视频编码技术详解</a><br>    <a href="https://blog.csdn.net/SYB773849846/article/details/51789994">[3] RGB,YUV,YCbCr 几种颜色空间的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频编码</tag>
      
      <tag>科普</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/21/hello-world/"/>
    <url>/2021/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
