<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo多部署-同时部署到阿里云OSS和Github</title>
    <link href="/2021/01/31/Hexo%E5%A4%9A%E9%83%A8%E7%BD%B2-%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%92%8CGithub/"/>
    <url>/2021/01/31/Hexo%E5%A4%9A%E9%83%A8%E7%BD%B2-%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%92%8CGithub/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo多部署-同时部署到阿里云OSS和Github"><a href="#Hexo多部署-同时部署到阿里云OSS和Github" class="headerlink" title="Hexo多部署-同时部署到阿里云OSS和Github"></a>Hexo多部署-同时部署到阿里云OSS和Github</h1><a id="more"></a><style>img {    display: block;    margin: 0 auto;}</style><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于<a href="https://6ss.top/posts/20200902/">1元 高速访问 博客网站 搭建方案</a> · <a href="https://www.uu126.cn/post/one-click-deployment-of-hexo-to-alibaba-cloud-oss.html">Hexo一键部署到阿里云OSS</a>进行补充，感谢原作分享</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><strong>选择购买域名并备案</strong> (<a href="https://wanwang.aliyun.com/domain/1yuan">阿里云域名1元购</a>)<br>  （域名实名有两天左右的延迟才能备案,备案服务号可以淘宝解决）  <img src="https://img.imgdb.cn/item/601669f23ffa7d37b34887c9.jpg" width="300"></li></ul><br><ul><li><p><strong>开通阿里云对象存储OSS</strong> (<a href="https://www.aliyun.com/product/oss?spm=5176.119692.725171.40.6b101636SQQTS4">对象存储 OSS</a>)</p><p>  (默认为按量收费)    </p></li></ul><img src="https://img.imgdb.cn/item/60166f3d3ffa7d37b34a88ab.jpg"><br><ul><li><strong>完成各种实名认证和信息登记</strong></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p>需要创建一个公共读的Bucket，用以设置静态网站托管及存放网站数据。</p><ul><li><p>登录OSS管理控制台。</p></li><li><p>单击Bucket列表，然后单击创建Bucket。</p></li><li><p>在创建Bucket面板配置Bucket参数，其中：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Bucket名称</td><td>设置Bucket名称。</td></tr><tr><td>地域</td><td>选择Bucket所在地域。</td></tr><tr><td>存储类型</td><td>选择标准存储。</td></tr><tr><td>读写权限</td><td>选择公共读。</td></tr></tbody></table></li><li><p>进入创建好的Bucket，点击基础设置，设置静态页面的默认首页为 index.html</p></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h3 id="设置AccessKey"><a href="#设置AccessKey" class="headerlink" title="设置AccessKey"></a>设置AccessKey</h3><ul><li><p><strong>在网页右上角点击AccessKey管理</strong></p><img src="https://img.imgdb.cn/item/601676893ffa7d37b34d4281.jpg"></li><li><p><strong>创建子用户然后添加权限</strong></p><ul><li>创建子用户<img src="https://img.imgdb.cn/item/601678e33ffa7d37b34e1bb7.jpg"></li><li>勾选编程访问<img src="https://img.imgdb.cn/item/601678fe3ffa7d37b34e2832.jpg"></li><li>添加权限<img src="https://img.imgdb.cn/item/601677473ffa7d37b34d8252.jpg"></li></ul></li></ul><ul><li><strong>选择管理对象存储服务(OSS)权限</strong>  <img src="https://img.imgdb.cn/item/601677d03ffa7d37b34dab91.jpg"></li></ul><ul><li><strong>进入用户，创建AccessKey</strong> <img src="https://img.imgdb.cn/item/601678a63ffa7d37b34dff70.jpg"> <p class="note note-warning">复制生成好的AccessKey ID 和 AccessKey Secret</p></li></ul><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><ul><li><p><strong>在hexo的目录下执行：</strong></p><pre><code>  npm install hexo-deployer-ali-oss --save</code></pre></li><li><p><strong>在hexo_config.yml文件中部署配置</strong></p></li></ul><p class="note note-warning">单部署器</p><pre><code>    deploy:    type: ali-oss    region: &lt;您的oss 区域代码&gt;    accessKeyId: &lt;您的oss  accessKeyId&gt;    accessKeySecret: &lt;您的oss accessKeySecret&gt;    bucket: &lt;您的bucket name&gt;</code></pre><p class="note note-warning">多部署器</p><img src="https://img.imgdb.cn/item/60167c6e3ffa7d37b34f5acc.jpg"><br><ul><li><a href="https://hexo.io/docs/one-command-deployment">hexo官方文档对部署器配置的解释</a></li></ul><h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><p>全部部署完成后，即可通过 hexo g 将博客同时推送至OSS和Github</p>]]></content>
    
    
    <categories>
      
      <category>hexo博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客部署</tag>
      
      <tag>对象存储OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频编码</title>
    <link href="/2021/01/30/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/"/>
    <url>/2021/01/30/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>如今我们所处的时代，是移动互联网时代，也可以说是视频时代。我们的生活被越来越多的视频元素所影响，而这一切，离不开视频拍摄技术的不断升级，还有视频制作产业的日益强大。除了视频拍摄工具和网络通信技术升级之外，我们能享受到视<br>频带来的便利和乐趣，还有一个重要因素，就是视频编码技术的突飞猛进。本文将对视频编码技术基础进行简述</p><a id="more"></a><h2 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h2><h3 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h3><hr><ul><li><strong>压缩</strong><ul><li><strong>为什么要压缩？</strong><ul><li>未经压缩的数字视频的数据量<strong>巨大</strong></li><li>存储困难</li><li>传输困难</li></ul></li></ul></li></ul><!--more--><ul><li><p><strong>为什么可以压缩？</strong></p><ul><li><p>去除冗余信息</p><ul><li><p>空间冗余: 图像相邻像素之间有较强的相关性</p></li><li><p>时间冗余: 视频序列的相邻图像之间内容相似</p></li><li><p>编码冗余: 不同像素值出现的概率不同</p></li><li><p>视觉冗余: 人的视觉系统对某些细节不敏感</p></li><li><p>知识冗余: 规律性的结构可由先验知识和背景知识得到</p><pre><code>   针对这些不同类型的冗余信息，在各种视频编码的标准算法中都有不同的技术专门应对，   以通过不同的角度提高压缩的比率。</code></pre></li></ul></li></ul></li><li><p><strong>数据压缩分类</strong></p><ul><li><p>无损压缩(Lossless)</p><ul><li>压缩前解压缩后图像完全一致 <strong>X=X’</strong></li><li>压缩比低(2:1~3:1)</li><li>例如: <ul><li>JPEG-LS(一种对连续色调图像的无损或者近无损的压缩标准)</li><li>Winzip</li></ul></li></ul></li><li><p>有损压缩(Lossy)</p><ul><li><p>压缩前解压缩后图像不一致 <strong>X≠X’</strong></p></li><li><p>压缩比高(10:1~20:1)</p></li><li><p>利用人的视觉系统的特性</p></li><li><p>例如:MPEG-2，H.264/AVC，AVS</p><p>   <strong>AVS与MPEG-2、MPEG-4 AVC/H.264使用的技术对比和性能差异估计</strong></p></li></ul></li></ul></li></ul><img src="https://img.imgdb.cn/item/601572f43ffa7d37b3f64e77.jpg"><!-- |视频编码标准|MPEG-2视频|MPEG-4 AVC/H.264视频|AVS视频|AVS视频与AVC/H.264性能差异估计（采用信噪比dB估算,括号内的百分比为码率差异）||--|--|--|--|--|--|--|--|--||帧内预测|只在频域内进行DC系数差分预测|基于4×4块，9种亮度预测模式，4种色度预测模式|基于8×8块，5种亮度预测模式，4种色度预测模式|基本相当||多参考帧预测|只有1帧|最多16帧|最多2帧|都采用两帧时相当，帧数增加性能提高不明显||变块大小运动补偿|16×16，16×8(场编码)|16×16、16×8、8×16、8×8、8×4、4×8、4×4|16×16、16×8、8×16、8×8|降低约0.1dB(2-4%)||B帧宏块直接编码模式|无|独立的空域或时域预测模式，若后向参考帧中用于导出运动矢量的块为帧内编码时，只是视其运动矢量为0，依然用于预测|时域空域相结合，当时域内后向参考帧中用于导出运动矢量的块为帧内编码时，使用空域相邻块的运动矢量进行预测|提高0.2-0.3dB(5%)||B帧宏块双向预测模式|编码前后两个运动矢量|编码前后两个运动矢量|称为对称预测模式，只编码一个前向运动矢量，后向运动矢量由前向导出|基本相当||熵编码|单一VLC表，适应性差|CAVLC：与周围块相关性高，实现较复杂CABAC：计算较复杂|上下文自适应2D-VLC，编码块系数过程中进行多码表切换|降低约0.5dB(10-15%)||环路滤波|无|基于4×4块边缘进行，滤波强度分类繁多，计算复杂|基于8×8块边缘进行，简单的滤波强度分类，滤波较少的像素，计算复杂度低|——||容错编码|简单的条带划分|数据分割、复杂的FMO/ASO等宏块、条带组织机制、强制Intra块刷新编码、约束性帧内预测等|简单的条带划分机制足以满足广播应用中的错误隐藏、恢复需求|——| --><pre><code>DCT（Discrete Cosine Transform）：离散余弦变换VLC（Variable Length Coding）：变长编码CAVLC（Context-based Adaptive Variable Length Coding）：基于上下文的自适应变长码CABAC（Context-based Adaptive Binary Arithmetic Coding）：基于上下文的自适应二进制算术编码FMO（Flexible Macroblock Ordering）：灵活的宏块排序ASO（Arbitrary Slice Ordering）：任意条带排列</code></pre><br><h3 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h3><hr><p class="note note-info">    数字视频有时间分辨率、空间分辨率、色彩空间、量化深度等参数，这些参数的组合称为视频格式</p><ul><li><p><strong>时间</strong>——帧率（frame per second）——流畅</p></li><li><p><strong>空间</strong>——分辨率——清晰</p></li><li><p><strong>色彩空间</strong></p><ul><li><p><strong>RGB颜色空间</strong></p>   <p class="note note-danger">                   RGB（红绿蓝）是依据人眼识别的颜色定义出的空间，可表示大部分颜色。       但在科学研究一般不采用RGB颜色空间，因为它的细节难以进行数字化的调整。       它将色调，亮度，饱和度三个量放在一起表示，很难分开。       它是最通用的面向硬件的彩色模型。该模型用于彩色监视器和一大类彩色视频摄像。   </p></li><li><p><strong>YUV颜色空间</strong></p>   <p class="note note-success">           在 YUV空间中，每一个颜色有一个亮度信号 Y，和两个色度信号 U 和V。       亮度信号是强度的感觉，它和色度信号断开，这样的话强度就可以在不影响颜色的情况下改变。       视频通信系统之所以要采用YUV，而不是RGB，主要是因为RGB信号不利于压缩。       在YUV这种方式里面，加入了亮度这一概念。眼睛对于亮和暗的分辨要比对颜色的分辨更精细一些，       人眼对色度的敏感程度要低于对亮度的敏感程度。   </p>　　所以，工程师认为，在我们的视频存储中，没有必要存储全部颜色信号。我们可以把更多带宽留给黑—白信号(被称作“亮度”)，将稍少的带宽留给彩色信号(被称作“色度”)。于是，就有了YUV。YUV里面的“Y”，就是亮度(Luma)，“U”和“V”则是色度(Chroma)</li><li><p><strong>YCbCr颜色空间</strong></p></li></ul></li></ul><p class="note note-secondary">            YCbCr 是在世界数字组织视频标准研制过程中作为ITU-RBT1601建议的一部分,其实是YUV经过缩放和偏移的翻版。            其中Y与YUV中的Y含义一致,Cb,Cr同样都指色彩, 只是在表示方法上不同而已。            在YUV家族中,YCbCr是在计算机系统中应用最多的成员,其应用领域很广泛,             JPEG、MPEG均采用此格式。</p><p><strong>Y表示亮度，CbCr表示颜色。怎么表示颜色，可以看下面这幅坐标图</strong></p><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156cbf3ffa7d37b3f3238a.png" width = "300" height = "300"  /><p><strong>Y要如何表示亮度呢，下面是Y在不同的情况下的表现</strong></p><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156ccf3ffa7d37b3f32a3e.png" width = "600" height = "200"  /><br><ul><li><p><strong>存储方式</strong></p><p> <strong>以黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量</strong></p></li></ul><img style="display: block; margin: 0 auto;" src="https://img.imgdb.cn/item/60156cdd3ffa7d37b3f32f33.jpg" width = "660" height = "200"  /><ul><li><p>YUV 4:4:4采样，每一个Y对应一组UV分量。</p></li><li><p>YUV 4:2:2采样，每两个Y共用一组UV分量。</p></li><li><p>YUV 4:2:0采样，每四个Y共用一组UV分量。</p><br></li><li><p><strong>量化深度</strong>——精确</p><pre><code> 像素每一分量的数值对应的量化等级为量化深度，量化深度越大，像素值可以越精确。 8 bit 10bit</code></pre><ul><li><p>10bit的视频记录更精确的色彩，比如我们平时用的rgb 每个通道8bit，那么每个颜色分量就0~255，只有256个，而10bit就有1024个。实际体验上，更细致的颜色分级意味着渐变色更细腻</p><pre><code>  视频的10bit的压制。  可以在保持高画质的前提下大大提升压缩效率，10bit压制主要是通过提升编码的精度，  从而在有损压缩时可以采用更高的量化值，同时保持十分好的质量，  于是可以在比8bit压制更低的码率下还原出更好的画面。  10bit在更高的精度冗余下可以在有损编码时有更高的效率。  具体对于画质有利的方面主要在于：  1.防止banding（色彩平滑过渡区域的色带）产生  2 提升暗场效果  3.更好地容纳噪点  而这几项正好都是现在8bit压制中很难处理的地方。特别是对于动画，  banding是个及其麻烦的东西。暗场是十分容易码率分配不足，并且产生画面劣化的部分。  而噪点则是十分消耗码率。10bit下这些困难的东西都变得容易处理了。  目前所使用的10bit压制是作用于内部的编码精度，而不是输出精度。</code></pre></li></ul></li></ul><h2 id="视频编码原理"><a href="#视频编码原理" class="headerlink" title="视频编码原理"></a>视频编码原理</h2><ul><li>冗余编码技术</li><li><img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0bd14a3.jpg"><br></li></ul><img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0c0cb08.jpg"><p>视频编码技术优先消除的目标，就是空间冗余和时间冗余。<br><br></p><ul><li>视频是由不同的帧画面连续播放形成的。这些帧，主要分为三类，分别是：<ul><li><strong>I帧</strong>：是自带全部信息的独立帧，是最完整的画面(占用的空间最大)，无需参考其它图像便可独立进行解码。视频序列中的第一个帧，始终都是I帧。<br></li><li><strong>B帧</strong>：“双向预测编码帧”，以前帧后帧作为参考帧。不仅参考前面，还参考后面的帧，所以，它的压缩率最高，可以达到200:1。不过，因为依赖后面的帧，所以不适合实时传输(例如视频会议)。<img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0cb81b8.jpg"><br></li><li><strong>P帧</strong>：“帧间预测编码帧”，需要参考前面的I帧和/或P帧的不同部分，才能进行编码。P帧对前面的P和I参考帧有依赖性。但是，P帧压缩率比较高，占用的空间较小。<img style="display: block; margin: 0 auto;" src="https://www.easemob.com/data/upload/ueditor/20191121/5dd62e0c74ff8.jpg"><br></li></ul></li></ul><p class="note note-primary">时间冗余（帧间预测）</p><p class="note note-primary">空间冗余（帧内预测）</p><br><h2 id="视频数据的封装"><a href="#视频数据的封装" class="headerlink" title="视频数据的封装"></a>视频数据的封装</h2><pre><code>　　对于任何一部视频来说，只有图像，没有声音，肯定是不行的。所以，视频编码后，加上音频编码，要一起进行封装。　　封装：就是封装格式，简单来说，就是将已经编码压缩好的视频轨和音频轨按照一定的格式放到一个文件中。    再通俗点，视频轨相当于饭，而音频轨相当于菜，封装格式就是一个饭盒，用来盛放饭菜的容器。　　目前主要的视频容器有如下：MPG、VOB、MP4、3GP、ASF、RMVB、WMV、MOV、Divx、MKV、FLV、TS/PS等。　　封装之后的视频，就可以传输了，你也可以通过视频播放器进行解码观看。</code></pre><p>　</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p class="note note-info">     <a href="https://blog.csdn.net/asahinokawa/article/details/80596655">[1] 对颜色空间 YUV,RGB 的理解</a><br>    <a href="https://www.easemob.com/news/3614">[2] 视频编码技术详解</a><br>    <a href="https://blog.csdn.net/SYB773849846/article/details/51789994">[3] RGB,YUV,YCbCr 几种颜色空间的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频编码</tag>
      
      <tag>科普</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/21/hello-world/"/>
    <url>/2021/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
